version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: transcription-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: transcription_prod
      POSTGRES_USER: transcription_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}  # From .env.production
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    networks:
      - transcription_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U transcription_user -d transcription_prod"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Service
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: transcription-backend
    restart: unless-stopped
    env_file:
      - ./backend/.env.production
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
    ports:
      - "5000:5000"
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/temp:/app/temp
      - ./backend/logs:/app/logs
      - ./backend/waveform-cache:/app/waveform-cache
      - ./backend/backups:/app/backups
      - ./backend/templates:/app/templates
      - ./backend/user_data:/app/user_data
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - transcription_network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Frontend Next.js Service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: transcription-frontend
    restart: unless-stopped
    env_file:
      - ./frontend/main-app/.env.production
    environment:
      NODE_ENV: production
    ports:
      - "3002:3002"
    depends_on:
      - backend
    networks:
      - transcription_network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: transcription-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx_cache:/var/cache/nginx
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - transcription_network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Redis for session management
  # redis:
  #   image: redis:7-alpine
  #   container_name: transcription-redis
  #   restart: unless-stopped
  #   command: redis-server --appendonly yes
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - transcription_network
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 3s
  #     retries: 5

# Networks
networks:
  transcription_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  postgres_data:
    driver: local
  nginx_cache:
    driver: local
  # redis_data:
  #   driver: local