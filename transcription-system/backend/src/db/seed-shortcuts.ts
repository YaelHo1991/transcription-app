import { db } from './connection';

interface SystemShortcut {
  category: string;
  shortcut: string;
  expansion: string;
  description?: string;
  priority?: number;
}

const systemShortcuts: SystemShortcut[] = [
  // Punctuation shortcuts - avoid shift key
  { category: 'punctuation', shortcut: '..', expansion: '?', description: '◊°◊ô◊û◊ü ◊©◊ê◊ú◊î', priority: 10 },
  { category: 'punctuation', shortcut: ',,', expansion: '"', description: '◊û◊®◊õ◊ê◊ï◊™', priority: 10 },
  { category: 'punctuation', shortcut: ';;', expansion: ':', description: '◊†◊ß◊ï◊ì◊™◊ô◊ô◊ù', priority: 10 },
  { category: 'punctuation', shortcut: '...', expansion: '‚Ä¶', description: '◊©◊ú◊ï◊© ◊†◊ß◊ï◊ì◊ï◊™', priority: 10 },
  { category: 'punctuation', shortcut: '--', expansion: '‚Äì', description: '◊û◊ß◊£ ◊ê◊®◊ï◊ö', priority: 10 },
  { category: 'punctuation', shortcut: '((', expansion: '(', description: '◊°◊ï◊í◊®◊ô◊ô◊ù ◊§◊™◊ô◊ó◊î', priority: 10 },
  { category: 'punctuation', shortcut: '))', expansion: ')', description: '◊°◊ï◊í◊®◊ô◊ô◊ù ◊°◊í◊ô◊®◊î', priority: 10 },
  
  // Legal terms
  { category: 'legal', shortcut: "◊¢'◊ì", expansion: '◊¢◊ï◊®◊ö ◊ì◊ô◊ü', description: '◊¢◊ï◊®◊ö ◊ì◊ô◊ü' },
  { category: 'legal', shortcut: "◊¢◊ï'◊ì", expansion: '◊¢◊ï◊®◊ö ◊ì◊ô◊ü', description: '◊¢◊ï◊®◊ö ◊ì◊ô◊ü' },
  { category: 'legal', shortcut: "◊®◊ï'◊ó", expansion: '◊®◊ï◊ê◊î ◊ó◊©◊ë◊ï◊ü', description: '◊®◊ï◊ê◊î ◊ó◊©◊ë◊ï◊ü' },
  { category: 'legal', shortcut: "◊ë◊ô◊î◊û'◊©", expansion: '◊ë◊ô◊™ ◊î◊û◊©◊§◊ò', description: '◊ë◊ô◊™ ◊î◊û◊©◊§◊ò' },
  { category: 'legal', shortcut: "◊õ◊ë'", expansion: '◊õ◊ë◊ï◊ì', description: '◊õ◊ë◊ï◊ì' },
  { category: 'legal', shortcut: "◊¢◊ï'◊°", expansion: '◊¢◊ï◊ë◊ì ◊°◊ï◊¶◊ô◊ê◊ú◊ô', description: '◊¢◊ï◊ë◊ì ◊°◊ï◊¶◊ô◊ê◊ú◊ô' },
  { category: 'legal', shortcut: "◊§◊°'◊ì", expansion: '◊§◊°◊ß ◊ì◊ô◊ü', description: '◊§◊°◊ß ◊ì◊ô◊ü' },
  { category: 'legal', shortcut: "◊™'◊ñ", expansion: '◊™◊¢◊ï◊ì◊™ ◊ñ◊î◊ï◊™', description: '◊™◊¢◊ï◊ì◊™ ◊ñ◊î◊ï◊™' },
  { category: 'legal', shortcut: "◊ó'◊§", expansion: '◊ó◊ë◊®◊î ◊§◊®◊ò◊ô◊™', description: '◊ó◊ë◊®◊î ◊§◊®◊ò◊ô◊™' },
  { category: 'legal', shortcut: "◊¢'◊û", expansion: '◊¢◊û◊ï◊™◊î', description: '◊¢◊û◊ï◊™◊î' },
  
  // Medical terms
  { category: 'medical', shortcut: "◊ì'◊®", expansion: '◊ì◊ï◊ß◊ò◊ï◊®', description: '◊ì◊ï◊ß◊ò◊ï◊®' },
  { category: 'medical', shortcut: "◊§◊®◊ï◊§'", expansion: '◊§◊®◊ï◊§◊°◊ï◊®', description: '◊§◊®◊ï◊§◊°◊ï◊®' },
  { category: 'medical', shortcut: "◊ë◊ô◊î'◊ó", expansion: '◊ë◊ô◊™ ◊ó◊ï◊ú◊ô◊ù', description: '◊ë◊ô◊™ ◊ó◊ï◊ú◊ô◊ù' },
  { category: 'medical', shortcut: "◊û◊ì'◊ê", expansion: '◊û◊í◊ü ◊ì◊ï◊ì ◊ê◊ì◊ï◊ù', description: '◊û◊í◊ü ◊ì◊ï◊ì ◊ê◊ì◊ï◊ù' },
  { category: 'medical', shortcut: "◊ß'◊ó", expansion: '◊ß◊ï◊§◊™ ◊ó◊ï◊ú◊ô◊ù', description: '◊ß◊ï◊§◊™ ◊ó◊ï◊ú◊ô◊ù' },
  
  // Common phrases
  { category: 'common', shortcut: "◊ï◊õ◊ï'", expansion: '◊ï◊õ◊ï◊ú◊ô', description: '◊ï◊õ◊ï◊ú◊ô' },
  { category: 'common', shortcut: "◊õ◊†'◊ú", expansion: '◊õ◊†◊ñ◊õ◊® ◊ú◊¢◊ô◊ú', description: '◊õ◊†◊ñ◊õ◊® ◊ú◊¢◊ô◊ú' },
  { category: 'common', shortcut: "◊ë◊°'◊ì", expansion: '◊ë◊°◊ô◊¢◊™◊ê ◊ì◊©◊û◊ô◊ê', description: '◊ë◊°◊ô◊¢◊™◊ê ◊ì◊©◊û◊ô◊ê' },
  { category: 'common', shortcut: "◊ë◊¢'◊î", expansion: '◊ë◊¢◊ñ◊®◊™ ◊î◊©◊ù', description: '◊ë◊¢◊ñ◊®◊™ ◊î◊©◊ù' },
  { category: 'common', shortcut: "◊¢'◊î", expansion: '◊¢◊ú◊ô◊ï ◊î◊©◊ú◊ï◊ù', description: '◊¢◊ú◊ô◊ï ◊î◊©◊ú◊ï◊ù' },
  { category: 'common', shortcut: "◊ñ◊¶'◊ú", expansion: '◊ñ◊õ◊® ◊¶◊ì◊ô◊ß ◊ú◊ë◊®◊õ◊î', description: '◊ñ◊õ◊® ◊¶◊ì◊ô◊ß ◊ú◊ë◊®◊õ◊î' },
  { category: 'common', shortcut: "◊©◊ú◊ô◊ò'◊ê", expansion: '◊©◊ô◊ó◊ô◊î ◊ú◊ô◊û◊ô◊ù ◊ò◊ï◊ë◊ô◊ù ◊ê◊®◊ï◊õ◊ô◊ù', description: '◊©◊ô◊ó◊ô◊î ◊ú◊ô◊û◊ô◊ù ◊ò◊ï◊ë◊ô◊ù ◊ê◊®◊ï◊õ◊ô◊ù' },
  { category: 'common', shortcut: "◊ê◊ô'◊î", expansion: '◊ê◊ù ◊ô◊®◊¶◊î ◊î◊©◊ù', description: '◊ê◊ù ◊ô◊®◊¶◊î ◊î◊©◊ù' },
  { category: 'common', shortcut: "◊ë◊ú'◊†", expansion: '◊ë◊ú◊ô ◊†◊ì◊®', description: '◊ë◊ú◊ô ◊†◊ì◊®' },
  
  // Business terms
  { category: 'business', shortcut: "◊û◊†◊õ'◊ú", expansion: '◊û◊†◊î◊ú ◊õ◊ú◊ú◊ô', description: '◊û◊†◊î◊ú ◊õ◊ú◊ú◊ô' },
  { category: 'business', shortcut: "◊°◊û◊†◊õ'◊ú", expansion: '◊°◊í◊ü ◊û◊†◊î◊ú ◊õ◊ú◊ú◊ô', description: '◊°◊í◊ü ◊û◊†◊î◊ú ◊õ◊ú◊ú◊ô' },
  { category: 'business', shortcut: "◊ô◊ï'◊®", expansion: '◊ô◊ï◊©◊ë ◊®◊ê◊©', description: '◊ô◊ï◊©◊ë ◊®◊ê◊©' },
  { category: 'business', shortcut: "◊ë◊¢'◊û", expansion: '◊ë◊¢◊®◊ë◊ï◊ü ◊û◊ï◊í◊ë◊ú', description: '◊ë◊¢◊®◊ë◊ï◊ü ◊û◊ï◊í◊ë◊ú' },
  { category: 'business', shortcut: "◊û◊¢'◊û", expansion: '◊û◊° ◊¢◊®◊ö ◊û◊ï◊°◊£', description: '◊û◊° ◊¢◊®◊ö ◊û◊ï◊°◊£' },
  { category: 'business', shortcut: "◊ó'◊ü", expansion: '◊ó◊©◊ë◊ï◊ü', description: '◊ó◊©◊ë◊ï◊ü' },
  { category: 'business', shortcut: "◊û◊°'", expansion: '◊û◊°◊§◊®', description: '◊û◊°◊§◊®' },
  
  // Academic terms
  { category: 'academic', shortcut: "◊ê◊ï◊†'", expansion: '◊ê◊ï◊†◊ô◊ë◊®◊°◊ô◊ò◊î', description: '◊ê◊ï◊†◊ô◊ë◊®◊°◊ô◊ò◊î' },
  { category: 'academic', shortcut: "◊û◊õ'", expansion: '◊û◊õ◊ú◊ú◊î', description: '◊û◊õ◊ú◊ú◊î' },
  { category: 'academic', shortcut: "◊ë◊ô◊î'◊°", expansion: '◊ë◊ô◊™ ◊°◊§◊®', description: '◊ë◊ô◊™ ◊°◊§◊®' },
  { category: 'academic', shortcut: "◊™◊ú◊û'", expansion: '◊™◊ú◊û◊ô◊ì', description: '◊™◊ú◊û◊ô◊ì' },
  
  // Technical terms
  { category: 'technical', shortcut: "◊û'◊ë", expansion: '◊û◊í◊î ◊ë◊ô◊ô◊ò', description: '◊û◊í◊î ◊ë◊ô◊ô◊ò' },
  { category: 'technical', shortcut: "◊í'◊ë", expansion: "◊í'◊ô◊í◊î ◊ë◊ô◊ô◊ò", description: "◊í'◊ô◊í◊î ◊ë◊ô◊ô◊ò" },
  { category: 'technical', shortcut: "◊ß'◊ë", expansion: '◊ß◊ô◊ú◊ï ◊ë◊ô◊ô◊ò', description: '◊ß◊ô◊ú◊ï ◊ë◊ô◊ô◊ò' },
];

export async function seedShortcuts() {
  try {
    console.log('üå± Seeding shortcuts...');
    
    // Get category IDs
    const categories = await db.query('SELECT id, name FROM shortcut_categories');
    const categoryMap = new Map(categories.rows.map(row => [row.name, row.id]));
    
    // Insert system shortcuts
    for (const shortcut of systemShortcuts) {
      const categoryId = categoryMap.get(shortcut.category);
      if (!categoryId) {
        console.warn(`Category not found: ${shortcut.category}`);
        continue;
      }
      
      await db.query(`
        INSERT INTO system_shortcuts (
          category_id, shortcut, expansion, description, priority, language
        ) VALUES ($1, $2, $3, $4, $5, $6)
        ON CONFLICT (shortcut, language) 
        DO UPDATE SET 
          expansion = EXCLUDED.expansion,
          description = EXCLUDED.description,
          priority = EXCLUDED.priority,
          updated_at = NOW()
      `, [
        categoryId,
        shortcut.shortcut,
        shortcut.expansion,
        shortcut.description || null,
        shortcut.priority || 0,
        'he'
      ]);
    }
    
    console.log(`‚úÖ Seeded ${systemShortcuts.length} system shortcuts`);
    
    // Initialize quotas for existing users
    await db.query(`
      INSERT INTO user_shortcut_quotas (user_id, max_shortcuts, used_shortcuts)
      SELECT id, 100, 0
      FROM users
      ON CONFLICT (user_id) DO NOTHING
    `);
    
    console.log('‚úÖ Initialized user quotas');
    
  } catch (error) {
    console.error('‚ùå Error seeding shortcuts:', error);
    throw error;
  }
}

// Function to run the migration
export async function runShortcutsMigration() {
  try {
    console.log('üìã Running shortcuts migration...');
    
    // Read and execute the migration file
    const fs = require('fs');
    const path = require('path');
    const migrationPath = path.join(__dirname, '..', '..', 'migrations', '007_create_shortcuts_tables.sql');
    const migrationSQL = fs.readFileSync(migrationPath, 'utf-8');
    
    await db.query(migrationSQL);
    console.log('‚úÖ Migration completed successfully');
    
    // Seed initial data
    await seedShortcuts();
    
  } catch (error) {
    console.error('‚ùå Migration failed:', error);
    throw error;
  }
}

// Export for use in server initialization
export default {
  seedShortcuts,
  runShortcutsMigration
};