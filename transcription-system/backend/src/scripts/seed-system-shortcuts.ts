import { db } from '../db/connection';

const systemShortcuts = [
  // Legal shortcuts
  { shortcut: "◊¢'◊ì", expansion: '◊¢◊ï◊®◊ö ◊ì◊ô◊ü', category: 'legal', description: '◊¢◊ï◊®◊ö ◊ì◊ô◊ü' },
  { shortcut: "◊ë◊ô◊î◊û'◊©", expansion: '◊ë◊ô◊™ ◊î◊û◊©◊§◊ò', category: 'legal', description: '◊ë◊ô◊™ ◊î◊û◊©◊§◊ò' },
  { shortcut: "◊õ◊ë'", expansion: '◊õ◊ë◊ï◊ì', category: 'legal', description: '◊õ◊ë◊ï◊ì ◊î◊©◊ï◊§◊ò' },
  { shortcut: "◊™'◊ñ", expansion: '◊™◊¢◊ï◊ì◊™ ◊ñ◊î◊ï◊™', category: 'legal', description: '◊™◊¢◊ï◊ì◊™ ◊ñ◊î◊ï◊™' },
  { shortcut: "◊ó◊ï'◊ì", expansion: '◊ó◊ï◊ï◊™ ◊ì◊¢◊™', category: 'legal', description: '◊ó◊ï◊ï◊™ ◊ì◊¢◊™' },
  
  // Medical shortcuts
  { shortcut: "◊ì'◊®", expansion: '◊ì◊ï◊ß◊ò◊ï◊®', category: 'medical', description: '◊ì◊ï◊ß◊ò◊ï◊®' },
  { shortcut: "◊§◊®◊ï◊§'", expansion: '◊§◊®◊ï◊§◊°◊ï◊®', category: 'medical', description: '◊§◊®◊ï◊§◊°◊ï◊®' },
  { shortcut: "◊ë◊ô◊î'◊ó", expansion: '◊ë◊ô◊™ ◊î◊ó◊ï◊ú◊ô◊ù', category: 'medical', description: '◊ë◊ô◊™ ◊î◊ó◊ï◊ú◊ô◊ù' },
  { shortcut: "◊ó'◊ì", expansion: '◊ó◊ì◊®', category: 'medical', description: '◊ó◊ì◊®' },
  { shortcut: "◊û◊ó'", expansion: '◊û◊ó◊ú◊ß◊î', category: 'medical', description: '◊û◊ó◊ú◊ß◊î' },
  
  // Common shortcuts
  { shortcut: "◊ï◊õ◊ï'", expansion: '◊ï◊õ◊ï◊ú◊ô', category: 'common', description: '◊ï◊õ◊ï◊ú◊ô' },
  { shortcut: "◊ë◊¢'◊û", expansion: '◊ë◊¢◊®◊ë◊ï◊ü ◊û◊ï◊í◊ë◊ú', category: 'common', description: '◊ó◊ë◊®◊î ◊ë◊¢"◊û' },
  { shortcut: "◊¢'◊ô", expansion: '◊¢◊ú ◊ô◊ì◊ô', category: 'common', description: '◊¢◊ú ◊ô◊ì◊ô' },
  { shortcut: "◊¢'◊§", expansion: '◊¢◊ú ◊§◊ô', category: 'common', description: '◊¢◊ú ◊§◊ô' },
  { shortcut: "◊ë'◊°", expansion: '◊ë◊ô◊™ ◊°◊§◊®', category: 'common', description: '◊ë◊ô◊™ ◊°◊§◊®' },
  { shortcut: "◊ë'◊õ", expansion: '◊ë◊ê ◊õ◊ï◊ó', category: 'common', description: '◊ë◊ê ◊õ◊ï◊ó' },
  
  // Academic shortcuts
  { shortcut: "◊ê◊ï◊†'", expansion: '◊ê◊ï◊†◊ô◊ë◊®◊°◊ô◊ò◊î', category: 'academic', description: '◊ê◊ï◊†◊ô◊ë◊®◊°◊ô◊ò◊î' },
  { shortcut: "◊û◊õ'", expansion: '◊û◊õ◊ú◊ú◊î', category: 'academic', description: '◊û◊õ◊ú◊ú◊î' },
  { shortcut: "◊™'◊ê", expansion: '◊™◊ï◊ê◊® ◊ê◊ß◊ì◊û◊ô', category: 'academic', description: '◊™◊ï◊ê◊® ◊ê◊ß◊ì◊û◊ô' },
  
  // Business shortcuts
  { shortcut: "◊û◊†◊õ'◊ú", expansion: '◊û◊†◊î◊ú ◊õ◊ú◊ú◊ô', category: 'business', description: '◊û◊†◊î◊ú ◊õ◊ú◊ú◊ô' },
  { shortcut: "◊°◊û◊†◊õ'◊ú", expansion: '◊°◊í◊ü ◊û◊†◊î◊ú ◊õ◊ú◊ú◊ô', category: 'business', description: '◊°◊í◊ü ◊û◊†◊î◊ú ◊õ◊ú◊ú◊ô' },
  { shortcut: "◊ô◊ï'◊®", expansion: '◊ô◊ï◊©◊ë ◊®◊ê◊©', category: 'business', description: '◊ô◊ï◊©◊ë ◊®◊ê◊©' },
  
  // English words
  { shortcut: '◊ï◊ï◊ê◊ò◊°◊ê◊§', expansion: 'WhatsApp', category: 'english', description: 'WhatsApp application' },
  { shortcut: '◊§◊ô◊ô◊°◊ë◊ï◊ß', expansion: 'Facebook', category: 'english', description: 'Facebook social network' },
  { shortcut: '◊í◊ï◊í◊ú', expansion: 'Google', category: 'english', description: 'Google search engine' },
  { shortcut: '◊ô◊ï◊ò◊ô◊ï◊ë', expansion: 'YouTube', category: 'english', description: 'YouTube video platform' },
  
  // Punctuation
  { shortcut: '--', expansion: '‚Äì', category: 'punctuation', description: '◊û◊ß◊£ ◊ê◊®◊ï◊ö' },
  { shortcut: '((', expansion: '(', category: 'punctuation', description: '◊°◊ï◊í◊®◊ô◊ô◊ù ◊§◊™◊ô◊ó◊î' },
  { shortcut: '))', expansion: ')', category: 'punctuation', description: '◊°◊ï◊í◊®◊ô◊ô◊ù ◊°◊í◊ô◊®◊î' },
  { shortcut: ',,', expansion: '"', category: 'punctuation', description: '◊û◊®◊õ◊ê◊ï◊™' },
  { shortcut: '..', expansion: '?', category: 'punctuation', description: '◊°◊ô◊û◊ü ◊©◊ê◊ú◊î' }
];

const categories = [
  { name: 'legal', description: '◊ß◊ô◊¶◊ï◊®◊ô◊ù ◊û◊©◊§◊ò◊ô◊ô◊ù', display_order: 1 },
  { name: 'medical', description: '◊ß◊ô◊¶◊ï◊®◊ô◊ù ◊®◊§◊ï◊ê◊ô◊ô◊ù', display_order: 2 },
  { name: 'common', description: '◊ë◊ô◊ò◊ï◊ô◊ô◊ù ◊†◊§◊ï◊¶◊ô◊ù', display_order: 3 },
  { name: 'academic', description: '◊ß◊ô◊¶◊ï◊®◊ô◊ù ◊ê◊ß◊ì◊û◊ô◊ô◊ù', display_order: 4 },
  { name: 'business', description: '◊ß◊ô◊¶◊ï◊®◊ô◊ù ◊¢◊°◊ß◊ô◊ô◊ù', display_order: 5 },
  { name: 'technical', description: '◊ß◊ô◊¶◊ï◊®◊ô◊ù ◊ò◊õ◊†◊ô◊ô◊ù', display_order: 6 },
  { name: 'english', description: '◊û◊ô◊ú◊ô◊ù ◊ë◊ê◊†◊í◊ú◊ô◊™', display_order: 7 },
  { name: 'punctuation', description: '◊°◊ô◊û◊†◊ô ◊§◊ô◊°◊ï◊ß', display_order: 8 }
];

async function seedSystemShortcuts() {
  try {
    console.log('üå± Seeding system shortcuts...');
    
    // First, create categories if they don't exist
    for (const category of categories) {
      await db.query(`
        INSERT INTO shortcut_categories (name, description, display_order, is_active)
        VALUES ($1, $2, $3, true)
        ON CONFLICT (name) DO UPDATE
        SET description = EXCLUDED.description,
            display_order = EXCLUDED.display_order
      `, [category.name, category.description, category.display_order]);
    }
    console.log('‚úÖ Categories created/updated');
    
    // Then add shortcuts
    for (const shortcut of systemShortcuts) {
      // Get category ID
      const categoryResult = await db.query(
        'SELECT id FROM shortcut_categories WHERE name = $1',
        [shortcut.category]
      );
      
      if (categoryResult.rows.length === 0) {
        console.warn(`Category ${shortcut.category} not found, skipping ${shortcut.shortcut}`);
        continue;
      }
      
      const categoryId = categoryResult.rows[0].id;
      
      // Insert shortcut (skip if exists)
      await db.query(`
        INSERT INTO system_shortcuts (shortcut, expansion, category_id, description, is_active, language)
        VALUES ($1, $2, $3, $4, true, 'he')
        ON CONFLICT (shortcut, language) DO UPDATE
        SET expansion = EXCLUDED.expansion,
            category_id = EXCLUDED.category_id,
            description = EXCLUDED.description,
            updated_at = CURRENT_TIMESTAMP
      `, [shortcut.shortcut, shortcut.expansion, categoryId, shortcut.description]);
    }
    
    console.log(`‚úÖ ${systemShortcuts.length} system shortcuts seeded`);
    
    // Show statistics
    const statsResult = await db.query(`
      SELECT 
        c.name as category,
        COUNT(s.id) as count
      FROM shortcut_categories c
      LEFT JOIN system_shortcuts s ON s.category_id = c.id
      GROUP BY c.name, c.display_order
      ORDER BY c.display_order
    `);
    
    console.log('\nüìä Shortcuts by category:');
    statsResult.rows.forEach(row => {
      console.log(`   ${row.category}: ${row.count} shortcuts`);
    });
    
    const totalResult = await db.query('SELECT COUNT(*) as total FROM system_shortcuts');
    console.log(`\n‚úÖ Total system shortcuts: ${totalResult.rows[0].total}`);
    
  } catch (error) {
    console.error('‚ùå Error seeding shortcuts:', error);
  } finally {
    await db.end();
  }
}

// Run the seeder
seedSystemShortcuts();